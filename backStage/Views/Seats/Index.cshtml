@model List<backStage.Models.Seat>
@{
    Layout = "_Layout";
    // key: "row-col" → seat
    var seatMap = Model.ToDictionary(
     s => $"{s.SeatRow[0] - 'A' + 1}-{int.Parse(s.SeatNumber)}"  // A→1, B→2...
 );
    int rowCount = ViewBag.RowCount ?? 13;
    int seatsPerRow = 25;  
    var halls = ViewBag.HallList as List<int>;

}
@section Styles {
    <style>
        html, body {
            height: 100%;
        }

        :root {
            --header-h: 4rem; 
            --footer-h: 2.5rem;
        }

        .row.full-height {
            height: calc(100vh - var(--header-h) - var(--footer-h));
        }

        @@media (max-width: 767.98px) { /* Bootstrap 的 md 斷點 - 0.02 */
            .full-height {
                height: auto !important;
            }
        }
        .app-wrapper,
        .app-main {
            flex: 1 1 auto;
            min-height: 0;
        }
        /* ---------- 右側整塊拿掉 padding，並允許被壓縮 ---------- */
        .app-wrapper,
        .app-main,
        .row.full-height, /* 你自己取的 class；要哪層高就補哪層 */
        .seat-col, /* 右側欄 */
        .seat-col > .card,
        .seat-col > .card-body {
            flex: 1 1 auto; /* 肯伸也肯縮 */
            min-height: 0; /* ❗ 關鍵：允許壓縮 */
        }

            /* 只讓最裡面的 card-body 負責捲動 */
            .seat-col > .card-body {
                overflow-y: auto; /* 垂直捲軸 */
            }

        .seats-wrapper {
            display: inline-block; /* 讓整塊內容一次排完 */
            width: max-content; /* 寬度隨內容決定 (>視窗就產生橫捲) */
            min-width: 100%; /* 但最小還是要跟視窗一樣寬，避免左邊被吃掉 */
        }
            /* card-body 本身就能橫向捲動 */
            .seat-col > .card > .card-body {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
                overscroll-behavior-x: contain;
            }

        /* ---------- 內容容器：只負責包座位，寬度隨內容 ---------- */
        .seat-grid {
            display: inline-block; /* block 也行，inline-block 更保險 */
            width: max-content;
            margin: 0;
            padding: 0;
        }

        /* 一排座位橫向排開 */
        .seat-row {
            display: flex;
            margin-bottom: 6px;
        }

        /* ---------- 單顆座位 ---------- */
        .seat {
            width: 35px;
            height: 30px;
            margin: 5px;
            border: 2px solid gray;
            border-radius: 10px 10px 0 0;
            background: gray;
            cursor: pointer;
            transition: .2s;
            flex: 0 0 35px; /* 不縮不放大，固定 35 寬 */
            box-sizing: border-box;
            aspect-ratio: 7/6; /* 寬高比固定 */
        }
        @@media(max - width:576px) {
            .seat

        {
            width: 24px;
            height: 20px;
            margin: 3px;
            border-width: 1px;
            border-radius: 6px 6px 0 0;
            flex: 0 0 24px; /* 同步改寬 */
            aspect-ratio: 6/5; /* 或寫 7/6 也行 */
        }

        }
        /* 狀態色 */
        .seat.maintenance {
            background: red;
        }

        .seat.selected {
            background: #01163e;
        }

        .seat.occupied {
            background: #ffc107;
            
        }

        .seat.empty {
            visibility: hidden
        }
        .seat.disabled {
            background: #fff;
            border: 2px solid #fff;
            cursor: default;
            
        }

        .read-only .seat.disabled {
            pointer-events: none;
        }
        .seat.occupied:hover {
            transform: scale(1.1);
        }
        /* 一排座位保持交叉軸不拉伸 */
        .seat-row {
            display: flex;
            align-items: center;
            margin-bottom: 6px;
        }

        .seat-col > .card {
            display: flex; /* 直向 */
            flex-direction: column;
            min-height: 0; /* ⚠️ 關鍵 */
        }

            /* 真正負責顯示座位＆捲軸的容器 */
            .seat-col > .card > .card-body {
                flex: 1 1 auto; /* 撐滿剩餘高度，又可收縮 */
                min-height: 0; /* ⚠️ 一定要有 */
                overflow: auto; /* 直向＋橫向都滾 */
            }

        .app-main {
            display: flex;
            flex-direction: column;
            min-height: 0; /* ← 關鍵 */
        }

        /* 2. 這列要填滿整個主內容區，但又要肯縮 */
        .row.full-height {
            flex: 1 1 auto;
            min-height: 0; /* ← 關鍵 */
        }

        /* 3. 右邊那張卡片本身也是 flex 容器 */
        .seat-col > .card {
            display: flex;
            flex-direction: column;
            min-height: 0; /* ← 關鍵 */
        }

            /* 4. 真正要滾動的地方 */
            .seat-col > .card > .card-body {
                flex: 1 1 0%; /* 塞滿剩餘空間又能收縮 */
                min-height: 0; /* ← 超級關鍵 */
                overflow: auto; /* 同時提供垂直＋水平捲軸 */
            }
        @@media (max-height:700px) {
            .seats-wrapper

        {
            transform: scale(.85);
            transform-origin: top center; /* 由上方為基準縮放 */
        }
        /* 因為縮小後寬度也跟著變小，若想保持滿版可再撐回去 */
        .seat-col > .card-body {
            display: flex;
            justify-content: center;
        }

        }

    </style>
}
<!-- ▽▽ 頁面本體 ▽▽ -->
<div class="container-fluid p-3 h-100">
    <div class="row gx-3 full-height mx-auto">

        <!-- 左側設定表單 -->
        <div class="col-12 col-md-3 col-lg-2 d-flex flex-column h-md-100 mb-3 mb-md-0">
            <div class="card flex-fill">
                <div class="card-body d-flex flex-column">
                    <div class="d-grid gap-2 mb-4">
                        <a asp-action="Create" asp-controller="Seats" class="btn btn-primary">新增影廳</a>
                        <a id="editModeBtn" href="#" class="btn btn-warning">編輯影廳</a>
                        <a id="deleteHallBtn"
                           class="btn btn-danger disabled"
                           data-base="@Url.Action("DeleteHall", "Seats")">
                            刪除影廳
                        </a>
                        
                    </div>
                    <div>
                        <label class="form-label">影廳名稱</label>
                        <select id="hallSelect" class="form-select">
                        <option value="">請選擇影廳</option>
                        @foreach (var h in ViewBag.HallList as List<int>)
                        {
                            <option value="@h"
                            selected="@((h == (int)ViewBag.SelectedHall) ? "selected" : null)">@h
                            </option>
                        }
                        </select>
                    </div>
                    <!-- ▼ 新增：工具列 -->
                    <div id="seatEditBar" class="d-grid gap-2 mt-3 d-none">
                        <button id="setDisabled" class="btn btn-secondary">設為禁用</button>
                        <button id="setSold" class="btn btn-warning text-white">設為售出</button>
                        <button id="setMaintenance" class="btn btn-danger">設為維修</button>
                        <button id="setNormal" class="btn btn-dark">狀態重置</button>
                        <button id="reloadSeats" class="btn btn-dark " type="button">重新載入</button>
                        <button id="saveChanges" class="btn btn-success">儲存</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- 右側座位表 -->
        <!-- 右側座位表 -->
        <div class="col-12 col-md-9 col-lg-10 d-flex flex-column h-100 mb-3 mb-md-0 seat-col">
            <div class="card flex-fill">
                <div class="card-header py-2">座位表</div>

                <!-- ✨ NEW：把可捲動的內容再包一層 seats-wrapper -->
                <div class="card-body p-0 overflow-auto">
                    <div class="seats-wrapper">
                        <div class="movie-screen mb-5">
                            <img src="~/images/img/screen-thumb.png" alt="screen" />
                        </div>

                        <!-- ▼▼ 座號(1~25)標題列 ▼▼ -->
                        <div class="seat-row seat-header">
                            <span class="row-label"></span> @* 左上角預留空位 *@
                            @for (int c = 1; c <= seatsPerRow; c++)
                            {
                                <span class="col-label">@c</span>
                            }
                        </div>
                        @for (int r = 1; r <= rowCount; r++)
                        {
                            <div class="seat-row">
                                <span class="row-label">
                                    @((char)('A' + r - 1))   
                                </span>

                                @for (int c = 1; c <= seatsPerRow; c++)
                                {
                                    seatMap.TryGetValue($"{r}-{c}", out var seat);

                                    if (seat == null)
                                    {
                                        <div class="seat empty"></div>
                                        continue;
                                    }

                                    var cls = seat.Status switch
                                    {
                                        "已售出" => "seat occupied",
                                        "維修中" => "seat maintenance",
                                        "禁用" => "seat disabled",   // ← 新增這一條
                                        _ => "seat"
                                    };

                                    <div class="@cls" data-row="@r" data-col="@c"></div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<script>
    /* -----------------------------------------------------------
     * SweetAlert2 小工具：icon＋文字
     * ---------------------------------------------------------*/
    function swalAlert(icon, text) {
        Swal.fire({
            icon,
            text,
            confirmButtonText: '確定',
            confirmButtonColor: '#3085d6'
        });
    }

    /* ===========================================================
     * 0. 預設把整頁設為「唯讀」；未進編輯模式前座位不得點
     * =========================================================*/
    document.body.classList.add('read-only');

    /* ===========================================================
     * 1. DOM 快速索引
     * =========================================================*/
    const editBtn    = document.getElementById('editModeBtn');
    const bar        = document.getElementById('seatEditBar');
    const hallSelect = document.getElementById('hallSelect');
    const deleteBtn  = document.getElementById('deleteHallBtn');
    const seatWrap   = document.querySelector('.seats-wrapper');

    const btnDisable = document.getElementById('setDisabled');
    const btnSold    = document.getElementById('setSold');
    const btnMain    = document.getElementById('setMaintenance');
    const btnNormal  = document.getElementById('setNormal');      // ← 狀態重置（局部／整廳）
    const btnReset   = document.getElementById('reloadSeats');    // ← 改：整廳重置
    const btnSave    = document.getElementById('saveChanges');

    const baseDelUrl = deleteBtn.dataset.base;                    // /Seats/DeleteHall
    const indexUrl   = '@Url.Action("Index", "Seats")';           // Razor→JS

    /* ===========================================================
     * 2. 前端狀態集合
     * =========================================================*/
    let   editing   = false;          // 是否在「編輯模式」
    const picked    = new Set();      // 已框選座位 key = 'row-col'
    const statusMap = new Map();      // 要送後端的變動  'row-col' → null / occupied / ...

    /* ===========================================================
     * 3. 拖曳旗標
     * =========================================================*/
    let dragging   = false;
    let dragStarts = false;

    /* ===========================================================
     * 4. 初始事件繫結（DOMContentLoaded）
     * =========================================================*/
    document.addEventListener('DOMContentLoaded', () => {

        /* 4-1 ▼ 影廳切換 */
        hallSelect.addEventListener('change', e => {
            const v = e.target.value.trim();
            toggleDeleteBtn(v);
            if (v) location.href = `${indexUrl}?theaterNumber=${v}`;
        });
        toggleDeleteBtn(hallSelect.value.trim());

        /* 4-2 ▼ 編輯模式開關 */
        editBtn.addEventListener('click', e => {
            e.preventDefault();
            editing = !editing;
            document.body.classList.toggle('read-only', !editing);
            editBtn.textContent = editing ? '編輯中' : '編輯影廳';
            bar.classList.toggle('d-none');
            if (!editing) clearAll();
        });

        /* 4-3 ▼ 整廳重置（把所有座位設回 null）*/
        btnReset.addEventListener('click', () => {
            if (!editing) {
                swalAlert('info', '請先進入編輯模式');
                return;
            }
            if (!hallSelect.value.trim()) {
                swalAlert('info', '請先選擇影廳');
                return;
            }
            resetAll();                 // ← 直接呼叫現成的整廳重置
        });

        /* 4-4 ▼ 三種狀態按鈕 */
        btnDisable.addEventListener('click', () => applyStatus('disabled'));
        btnSold.addEventListener   ('click', () => applyStatus('occupied'));
        btnMain.addEventListener   ('click', () => applyStatus('maintenance'));

        /* 4-5 ▼ 「重設」按鈕：有框選 → 重設框選；否則 → 整廳重設 */
        btnNormal.addEventListener('click', () => {
            if (picked.size) {
                applyStatus('normal');  // 局部
            } else {
                resetAll();             // 全廳
            }
        });

        /* 4-6 ▼ 儲存 */
        btnSave.addEventListener('click', saveChanges);

        /* 4-7 ▼ 座位 單點 / 拖曳選取 */
        seatWrap.addEventListener('mousedown', onMouseDown);
        seatWrap.addEventListener('mouseover', onMouseOver);
        document.addEventListener('mouseup',   onMouseUp);
    });

    /* ===========================================================
     * 5. 事件處理
     * =========================================================*/
    function toggleDeleteBtn(val) {
        if (val) {
            deleteBtn.classList.remove('disabled');
            deleteBtn.href = `${baseDelUrl}?theaterNumber=${val}`;
        } else {
            deleteBtn.classList.add('disabled');
            deleteBtn.href = '#';
        }
    }

    /* ---- 5-1 ▼ MouseDown：單點或開始拖曳 ---- */
    function onMouseDown(e) {
        if (!editing) return;
        const seat = e.target.closest('.seat');
        dragStarts = !!seat && !seat.matches('.placeholder');
        if (!dragStarts) return;

        dragging = true;
        e.preventDefault();             // 阻止反白文字
        toggleSeat(seat);
    }

    /* ---- 5-2 ▼ 拖曳經過 ---- */
    function onMouseOver(e) {
        if (!dragging || !editing || !dragStarts) return;
        const seat = e.target.closest('.seat');
        if (!seat || seat.matches('.placeholder')) return;
        selectSeat(seat);               // 只加不減
    }

    /* ---- 5-3 ▼ MouseUp：結束拖曳 ---- */
    function onMouseUp() {
        dragging = false;
        dragStarts = false;
    }

    /* ===========================================================
     * 6. 選取輔助
     * =========================================================*/
    function toggleSeat(seat) {
        const k = `${seat.dataset.row}-${seat.dataset.col}`;
        if (seat.classList.contains('selected')) {
            seat.classList.remove('selected');
            picked.delete(k);
        } else {
            seat.classList.add('selected');
            picked.add(k);
        }
    }
    function selectSeat(seat) {         // 只選不取消
        const k = `${seat.dataset.row}-${seat.dataset.col}`;
        if (!seat.classList.contains('selected')) {
            seat.classList.add('selected');
            picked.add(k);
        }
    }

    /* ===========================================================
     * 7. 重設專用：一次把所有座位變正常
     * =========================================================*/
    function resetAll() {
        seatWrap.querySelectorAll('.seat:not(.empty)').forEach(seat => {
            seat.classList.remove('selected', 'occupied', 'maintenance', 'disabled');
            const k = `${seat.dataset.row}-${seat.dataset.col}`;
            statusMap.set(k, null);     // null = 正常
        });
        clearAll();                     // 清框選
    }

    /* ===========================================================
     * 8. 套用狀態（禁用 / 售出 / 維修 / 重設）
     * =========================================================*/
    function applyStatus(newCls) {
        if (picked.size === 0) return;

        picked.forEach(k => {
            const [r, c] = k.split('-');
            const seat = seatWrap.querySelector(`.seat[data-row="${r}"][data-col="${c}"]`);
            if (!seat) return;          // placeholder

            seat.classList.remove('selected', 'occupied', 'maintenance', 'disabled');

            if (newCls !== 'normal') {  // 要加特殊顏色
                seat.classList.add(newCls);
                statusMap.set(k, newCls);
            } else {                    // 重設 → 回灰色
                statusMap.set(k, null);
            }
        });
        clearAll();                     // 清框選
    }

    /* ===========================================================
     * 9. 儲存：送到 /Seats/SaveSeatEdits
     * =========================================================*/
    function saveChanges() {
        const updArr = [...statusMap].map(([k, cls]) => {
            const [row, col] = k.split('-');
            return { row, col, status: cls };  // cls 可能是 null
        });
        if (updArr.length === 0) {
            quitEditMode();
            return;
        }

        fetch('/Seats/SaveSeatEdits', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                theaterNumber: hallSelect.value,
                deleteSeats: [],        // 目前不刪資料
                updateSeats: updArr
            })
        })
        .then(r => r.json())
        .then(res => {
            if (res.success) {
                swalAlert('success', '已儲存');
                statusMap.clear();
                quitEditMode();
            } else {
                swalAlert('error', '儲存失敗：' + res.message);
            }
        })
        .catch(err => {
            console.error(err);
            swalAlert('error', '連線錯誤：' + err);
        });
    }

    /* ===========================================================
     * 10. 其它共用小函式
     * =========================================================*/
    function clearAll() {
        seatWrap.querySelectorAll('.seat.selected')
            .forEach(s => s.classList.remove('selected'));
        picked.clear();
    }
    function quitEditMode() {
        editing = false;
        document.body.classList.add('read-only');
        bar.classList.add('d-none');
        editBtn.textContent = '編輯影廳';
        clearAll();
    }
</script>







